/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
 
/*
 This helper script defines a readme2html task that converts the project
 README.md to ${buildDir}/html/README.md
 
 Requirements:
	 plugins {
		id "org.kordamp.gradle.markdown" version "2.0.0"
	 }
	 
	 ext {
		gradleHelpersLocation = "https://raw.githubusercontent.com/fortify-ps/gradle-helpers/master"
		//gradleHelpersLocation = "file:../gradle-helpers"
	 }
*/

task copyReadme(type: Copy) {
	from("${projectDir}") {
		include "README.md"
	}
	filter { line ->
		def patternInclude = ~/^\s*<X-INCLUDE url="(\S+)"\s*\/>\s*$/
		def patternPrp = ~/\$\{(\S+)\}/
		line = line.replaceFirst(patternInclude) { _, url ->
			// TODO Any better way for doing property expansion? 
			def evaluatedUrl = url.replaceAll(patternPrp) { __, prp -> project.properties[prp] }
			println "Including "+evaluatedUrl
			return evaluatedUrl.toURL().text
		}
		// TODO condense into single pattern with optional / to match both start and end tag
		def patternXTagStart = ~/(?i)<X-TAG-/
		def patternXTagEnd = ~/(?i)<\/X-TAG-/
		return line.replaceAll(patternXTagStart, '<').replaceAll(patternXTagEnd, '</')
	}
	into "${buildDir}/markdown"
}

markdownToHtml.sourceDir=file("${buildDir}/markdown")
markdownToHtml.outputDir=file("${buildDir}/html")
markdownToHtml.configuration=[
	hardwraps: false,
	removeHtml: false,
	autoLinks: true,
	abbreviations: true,
	definitionLists: true,
	smartQuotes: true,
	smartPunctuation: true,
	fencedCodeBlocks: true,
	tables: true
]
markdownToHtml.dependsOn 'copyReadme'

task readme2html {
	dependsOn 'copyReadme', 'markdownToHtml'
}