/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/

/*
 Task to package dependency sources and license report
*/
task packageDependencySourcesAndLicenses { //TODO Any better name for this task?
	dependsOn 'packageLicenseReport' 
	dependsOn 'packageDependencySources'
}

/*
 Default license report configuration
*/
licenseReport {
    configurations = ['runtimeClasspath']
    excludeOwnGroup = true
}

/*
 Task to package output of generateLicenseReport task in a zip file
*/
task packageLicenseReport(type: Zip) {
	dependsOn 'generateLicenseReport'
	archiveFileName = "${rootProject.name}-${project.version}-licenseReport.zip"
	destinationDirectory = file("$buildDir/dist")
	
	from licenseReport.outputDir
}

/*
 Task to download dependency sources
*/
task downloadDependencySources {
	inputs.files configurations.runtimeClasspath
    outputs.dir "${buildDir}/dependencySources"
    doLast {
        def componentIds = configurations.runtimeClasspath.incoming.resolutionResult.allDependencies.collect { it.selected.id }
        ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
            .forComponents(componentIds)
            .withArtifacts(JvmLibrary, SourcesArtifact)
            .execute()
        def sourceArtifacts = []
        result.resolvedComponents.each { ComponentArtifactsResult component ->
            Set<ArtifactResult> sources = component.getArtifacts(SourcesArtifact)
            println "Found ${sources.size()} sources for ${component.id}"
            sources.each { ArtifactResult ar ->
                if (ar instanceof ResolvedArtifactResult) {
                    sourceArtifacts << ar.file
                }
            }
        }

        copy {
            from sourceArtifacts
            into "${buildDir}/dependencySources"
        }
    }
}

/*
 Task to package output of downloadDependencySources task in a zip file
*/
task packageDependencySources(type: Zip) {
	dependsOn 'downloadDependencySources'
	archiveFileName = "${rootProject.name}-${project.version}-dependencySources.zip"
	destinationDirectory = file("$buildDir/dist")
	
	from "${buildDir}/dependencySources"
}
